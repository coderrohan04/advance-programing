-------------------------------------------------------------------Compare two linked lists
static boolean compareLists(SinglyLinkedListNode head1, SinglyLinkedListNode head2) {


      if(head1==null && head2==null)
      return true;
      while(head1!=null||head2!=null){
          if(head1==null||head2==null)
          return false;
          if(head1.data!=head2.data)
          return false;
          head1=head1.next;
          head2=head2.next;
          
      }
      return true;
    }
===================================================================in C++
bool compare_lists(SinglyLinkedListNode* head1, SinglyLinkedListNode* head2) {

    SinglyLinkedListNode *ptr1 = head1 ;
    SinglyLinkedListNode *ptr2 = head2 ;
    
    //traverse
    while(ptr1!=NULL && ptr2!=NULL){
        
        if(ptr1->data != ptr2->data){break;}
        
        ptr1 = ptr1->next ;
        ptr2 = ptr2->next ;
    }
    if(ptr1==NULL && ptr2==NULL){return 1 ;}
    return 0 ;
    
}
-------------------------------------------------------------------2nd Part
DoublyLinkedListNode* sortedInsert(DoublyLinkedListNode* llist, int data) {
    DoublyLinkedListNode* a = 0;
    DoublyLinkedListNode* b = llist;
    for (; b && b->data < data; a = b, b = b->next) {}
    auto newNode = new DoublyLinkedListNode(data);
    if (b != nullptr) {
        b->prev = newNode;
        newNode->next = b;
    }
    if (a != nullptr) {
        a->next = newNode;
        newNode->prev = a;
    } else {
        return newNode;
    }
    return llist;
}





public static DoublyLinkedListNode sortedInsert(DoublyLinkedListNode llist, int data) {
            DoublyLinkedListNode temp = llist;
            DoublyLinkedListNode newNode = new DoublyLinkedListNode(data);
            
            if(data < temp.data){
                newNode.next = llist;
                llist.prev = newNode;
                return newNode;
            }
            
            for(;temp.next != null && temp.data < data; temp = temp.next);
            
            if(temp.next == null && temp.data < data){
                newNode.prev = temp;
                temp.next = newNode; 
            }
            else{
                newNode.prev = temp.prev;
                newNode.prev.next = newNode;
                newNode.next = temp;
                temp.prev = newNode;
            }         
            
            return llist;

    }

